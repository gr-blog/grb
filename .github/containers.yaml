name: Build & publish container images and manifests

on:
  push:
    branches: [master]
  workflow_dispatch:
# Grant the job permission to write packages
permissions:
  contents: read # needed by checkout
  packages: write # lets us push to ghcr.io
env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}

jobs:
  # --------------------------------------------------
  # 0. Detect what actually changed in this push
  # --------------------------------------------------
  changes:
    name: Detect changed paths
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      frontend: ${{ steps.filter.outputs.frontend }}
      bot: ${{ steps.filter.outputs.bot }}
    steps:
      - uses: actions/checkout@v4

      - id: filter
        uses: dorny/paths-filter@v3
        with:
          base: ${{ github.event.before }} # compare against the previous commit
          filters: |
            # Shared bits â”€ identical to *paths_shared in GitLab CI
            _shared: &shared
              - packages/k8s/src/shared/**/*
              - packages/k8s/src/main.ts
              - packages/tsconfig.base.json
              - packages/k8s/*.sh
              - build-target.sh
              - manifest.sh
              - Dockerfile
            # Service-specific filters include the shared group
            api:
              - *shared
              - packages/k8s/src/api/**/*
              - packages/api/**/*
            frontend:
              - *shared
              - packages/k8s/src/frontend/**/*
              - packages/frontend/**/*
            bot:
              - *shared
              - packages/k8s/src/bot/**/*
              - packages/bot/**/*

  # --------------------------------------------------
  # 1. Build & push the per-arch images
  # --------------------------------------------------
  # --------------------------------------------------
  # 1. Build & push per-arch images  (matrix: api | frontend | bot)
  # --------------------------------------------------
  image:
    runs-on: ubuntu-latest
    needs: changes
    container: moby/buildkit:latest
    strategy:
      fail-fast: false
      matrix:
        service: [api, frontend, bot]

    env:
      SERVICE: ${{ matrix.service }}

    steps:
      # ---- 0. Gate: decide if we actually need to run for this service ----
      - name: Decide whether ${{ matrix.service }} changed
        id: gate
        run: |
          case "${{ matrix.service }}" in
            api)      SHOULD=${{ needs.changes.outputs.api      }} ;;
            frontend) SHOULD=${{ needs.changes.outputs.frontend }} ;;
            bot)      SHOULD=${{ needs.changes.outputs.bot      }} ;;
          esac
          echo "should_run=$SHOULD" >> "$GITHUB_ENV"

      # Real build path (only runs when should_run == true) ---------------
      - uses: actions/checkout@v4
        if: env.should_run == 'true'

      - name: Compute SHORT_SHA
        if: env.should_run == 'true'
        run: echo "

      - name: Log in to GHCR
        uses: docker/login-action@v3
        if: env.should_run == 'true'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push image
        if: env.should_run == 'true'
        run: ./build-target.sh

  manifest:
    needs: [image, changes] # keep both so we can reuse the gate logic
    runs-on: ubuntu-latest
    container: ghcr.io/oras-project/oras:v1.2.2
    strategy:
      fail-fast: false
      matrix:
        service: [api, frontend, bot]

    env:
      SERVICE: ${{ matrix.service }}

    steps:
      - name: Decide whether ${{ matrix.service }} changed
        id: gate
        run: |
          case "${{ matrix.service }}" in
            api)      SHOULD=${{ needs.changes.outputs.api      }} ;;
            frontend) SHOULD=${{ needs.changes.outputs.frontend }} ;;
            bot)      SHOULD=${{ needs.changes.outputs.bot      }} ;;
          esac
          echo "should_run=$SHOULD" >> "$GITHUB_ENV"

      # Real manifest work (only on changed services) ---------------------
      - uses: actions/checkout@v4
        if: env.should_run == 'true'

      - name: Log in with ORAS
        if: env.should_run == 'true'
        run:
          echo "${{ secrets.GITHUB_TOKEN }}" | \ oras login ghcr.io -u ${{ github.actor }}
          --password-stdin

      - name: Push manifest list
        if: env.should_run == 'true'
        run: ./manifest.sh
